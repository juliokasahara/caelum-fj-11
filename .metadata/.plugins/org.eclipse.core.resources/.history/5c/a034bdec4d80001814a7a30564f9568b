package br.com.caelum.contas.modelo;

public abstract class Conta {
	private int numero;
	private double saldo;
	private double limite;
	private static int totalDeContas;
	private int agencia;

	public Conta() {
		Conta.totalDeContas++;
	}
	
	// Obriga todas as subclasse implementar o metodo.
	public abstract String getTipo();

	public Cliente titular = new Cliente();

	public String saca(double valor) {
		if (getSaldo() >= valor) {
			if(this.getTipo().equals("Conta Corrente")){
				this.setSaldo(getSaldo() - valor - 0.10);
			}else{
				this.setSaldo(getSaldo() - valor);
			}

			return "Saque efetuado com Sucesso da ";
		} else {
			return "Erro saldo insuficiente!";
		}
	}

	public void deposito(double valor) {
		if (valor > 0) {
			this.setSaldo(getSaldo() + valor);

		} else {
			System.out.println("Impossivel depositar valor negativo");
		}
	}

	public String transferePara(Conta conta, double valor) {
		if (getSaldo() >= valor) {
			conta.deposito(valor);
		}
			return saca(valor);
	}

	public int getNumero() {
		return numero;
	}

	public void setNumero(int numero) {
		this.numero = numero;
	}

	public double getSaldo() {
		return saldo;
	}

	public void setSaldo(double saldo) {
		this.saldo = saldo;
	}

	public double getLimite() {
		return limite;
	}

	public void setLimite(double limite) {
		this.limite = limite;
	}

	public static int getTotalDeContas() {
		return Conta.totalDeContas;
	}

	public Cliente getTitular() {
		return titular;
	}

	public int getAgencia() {
		return agencia;
	}

	public void setAgencia(int agencia) {
		this.agencia = agencia;
	}

}
